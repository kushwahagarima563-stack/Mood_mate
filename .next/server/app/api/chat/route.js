"use strict";(()=>{var e={};e.id=744,e.ids=[744],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},78820:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>g,patchFetch:()=>_,requestAsyncStorage:()=>p,routeModule:()=>c,serverHooks:()=>h,staticGenerationAsyncStorage:()=>m});var r={};a.r(r),a.d(r,{POST:()=>d});var s=a(49303),i=a(88716),n=a(60670),o=a(87070),l=a(16945),u=a(72331);async function d(e){try{let{history:t,message:a,sessionId:r}=await e.json(),s=r;if(s){if(!await u._.session.findUnique({where:{id:s}})){let e=await u._.user.findUnique({where:{email:"default@example.com"}});e||(e=await u._.user.create({data:{email:"default@example.com",name:"Default User"}})),s=(await u._.session.create({data:{userId:e.id}})).id}}else{let e=await u._.user.findUnique({where:{email:"default@example.com"}});e||(e=await u._.user.create({data:{email:"default@example.com",name:"Default User"}})),s=(await u._.session.create({data:{userId:e.id}})).id}await u._.message.create({data:{role:"user",content:a,session:{connect:{id:s}}}});let i=await (0,l.W)(t,a);return await u._.message.create({data:{role:"assistant",content:i,session:{connect:{id:s}}}}),o.NextResponse.json({text:i,sessionId:s})}catch(e){return console.error("Error in POST /api/chat:",e),o.NextResponse.json({error:"Internal Server Error"},{status:500})}}let c=new s.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/chat/route",pathname:"/api/chat",filename:"route",bundlePath:"app/api/chat/route"},resolvedPagePath:"C:\\Users\\Garima\\Desktop\\Mood_mate\\app\\api\\chat\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:p,staticGenerationAsyncStorage:m,serverHooks:h}=c,g="/api/chat/route";function _(){return(0,n.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:m})}},16945:(e,t,a)=>{a.d(t,{W:()=>i,k:()=>n});var r=a(11258);let s=new r.$D(process.env.GEMINI_API_KEY);async function i(e,t){let a=s.getGenerativeModel({model:"gemini-2.5-flash"}).startChat({history:e,generationConfig:{temperature:.9,topK:1,topP:1,maxOutputTokens:8192},safetySettings:[{category:r.OA.HARM_CATEGORY_HARASSMENT,threshold:r.MN.BLOCK_MEDIUM_AND_ABOVE},{category:r.OA.HARM_CATEGORY_HATE_SPEECH,threshold:r.MN.BLOCK_MEDIUM_AND_ABOVE},{category:r.OA.HARM_CATEGORY_SEXUALLY_EXPLICIT,threshold:r.MN.BLOCK_MEDIUM_AND_ABOVE},{category:r.OA.HARM_CATEGORY_DANGEROUS_CONTENT,threshold:r.MN.BLOCK_MEDIUM_AND_ABOVE}],systemInstruction:{role:"user",parts:[{text:`
You are MoodMate, an empathetic emotional support companion.
Your goal is to listen deeply, validate feelings, and gently guide the user toward clarity and calm.

Guidelines:
- Be warm, non-judgmental, and supportive.
- Actively listen: reflect or rephrase what the user says to show understanding.
- Validate emotions without minimizing them. Normalize feelings.
- Ask gentle, open-ended questions that encourage self-reflection.
- Offer simple coping strategies, mindfulness practices, or grounding techniques if relevant.
- Encourage but never pressure the user to share more.
- Do not provide medical or diagnostic advice.
- If the user mentions self-harm, suicidal thoughts, or crisis, respond compassionately and suggest reaching out to a professional or a trusted helpline.
- Always prioritize empathy and companionship over solutions.
`}]}}),i=await a.sendMessage(t),n=await i.response;return await n.text()}async function n(e){let t=s.getGenerativeModel({model:"embedding-001"});return(await t.embedContent(e)).embedding.values}},72331:(e,t,a)=>{a.d(t,{_:()=>s});var r=a(53524);let s=global.prisma||new r.PrismaClient({log:["query"]})}};var t=require("../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),r=t.X(0,[9276,5972,1258],()=>a(78820));module.exports=r})();